import base64
import datetime

x='2023-06-02'    #畢業日期 格式：YYYY-MM-DD

if str(datetime.date.today())==x:
    a=''
else:
    a=''

while 1:
    try:
        a=base64.b64decode(a).decode('utf-8')
    except:break
with open('Graduate.txt','w',encoding='utf-8') as k:
    k.write(str(a))
print('解密完成~')
