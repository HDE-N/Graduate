import base64
import datetime

x='2023-05-30'    #畢業日期 格式：YYYY-MM-DD

a='Vm0wd2QyVkZNVWhTYmxKV1YwZDRXRmxVU2xOV1ZsbDNXa2M1VjJKSGVGWlZNbmhQWVVaS2MxZHFRbUZXVjFKSVZtcEJlRll5VGtsaVJtUnBWMFpHTTFadE1YcGxSbGw0Vkc1T1lWSnRVbGhVVkVaTFZGWmtXR1JIUmxSTmF6RTFWa2QwWVZsV1NuUlZiR2hWVmtWYVNGUlVSbXRXTVdSMFpFWk9UbEpHV2paV2Fra3hVekZrU0ZOcmFGWmlSMmhXVm10V1lWUkdXbk5YYlVaclVqRmFTVnBGV2s5VWJVWTJVbFJDVjAxdVVuWldWRVpXWlZaT2NtSkdTbWxoTUhCWVYxZDRiMkl4WkVkVmJGWlRZbFZhVkZSV2FFTlNiRnBZWlVaa2FGWnNjSGxXTVZKRFYwWmFSbE5zYUZoV2JIQlRXbFZhYTJNeFduUmlSazVwVmpKb1dWWXhaRFJpTWtsM1RWaE9WbUpHY0ZsWmJGWmhWMVpXY1ZKdFJsUlNiSEJKV2xWb2ExWXdNWEpqUm1oV1RXNUNhRlpxUm1GU2JHUjFWMnh3YUdFeGNHOVhXSEJIWVRKT2MxcElVbXBTYXpWd1ZUQldTMWRXV1hoWGJYUk9VbTE0V0ZscldtdGhiRXAwVld4c1dtRXhWWGhaTVZwVFYwZFNTRkpzVGs1V2JrSktWMVJPZDFZeFdYZE5XRXBZVmtWd1dGbHNhRU5XUmxweFUydDBXRll3V2toV1YzaHJWVEZLVjJOR1VsaGlSbkJvVmtSS1RtVldUbkphUm1ScFVqSm9WVlpHWTNoaU1rbDRWMjVLV0dKSFVtOVVWbHBYVGxaYWRFNVZPV2hXYXpWSFZHeGFiMVl5UlhoWGJXaGFUVlp3VkZZd1pFOU9iRXB6Vld4a2FWZEhhRmxXYlhCTFpXczFWMWR1U2s1V2JIQnhWV3RXWVZZeFduRlViRXBPVW14d2VGVnRNVWRoYXpGV1RsaHNWMVl6YUdoWlZXUkdaVWRPUmsxV1pGZFNWWEJ2Vm0xd1MxUnRWbGRUYmtwWVlYcHNXRmxzV2t0bGJHUllaVWM1YVUxRVFqUldNalZUVkd4YVIxTnNaRlZXTTA0MFZHdGFZV1JIVmtoa1JtUk9ZVE5DU2xac1kzaGlNVnB5VFZWb1ZtSkdTbGhaVjNSaFYwWndSbHBHWkZOTmF6VkhWR3hrYzFVd01IbGFla1pYVFZad1dGbFVSa3BsUm1SWllVWm9hVkpzY0ZWWFZsSkhaREZzVjJKR1ZsTmlWVnBYVlcxNGMwNVdjRlphUldSVlRXdHdSMWt3YUhkWGJGcFhZMFJPV2xaV1ZqUldNVnBIWkVVNVYyRkhhRTVXYmtKWlZqSjRWMWxYUlhoVWEyUllZbXR3YUZWdE1XOWpSbGwzV2tjNWEwMVdjRmxhVldNMVZXMUtWMWR1Y0ZkTmJtaFlWbXhrUzJSR1ZuTldiRlpYWWtoQ05sWkhlR0ZXTWxKSVZXdG9VRlpzY0U5WlZFWmFUVVprVlZGdFJsTk5WbXd6VkZaV2ExZEhSWHBoUm1oV1lURmFhRnBYZUhkU2JIQkdUbGQ0YVZaV2NFcFhiRlpoWVRKR1YxcEZhR2hTYmtKWVdXeG9iMk5zY0ZoamVrWllVbXR3V2xscldsTmhSVEYxWVVaU1dGWXpVbkpVYTFwYVpVZEtTVlJzV21oTmJFcFFWa1phYTA1R1dYaFhXR3hzVTBkU2NGVnRkSGROUmxwWVkwVmtWMDFWYkRaWlZXaExWakZLTmxKcmFGcGxhMXB5V2tWVk5WWXhjRWRVYld4VVVsVnZNVlp0ZUd0a01VbDRZa1pvVm1FeVVsaFpiWFIzWTBaV2NWUnJUbGRTYkVwWFZqSTFhMWRHV25OalJXaFhUV3BHU0ZZd1pFZE9iRXB6WVVab2FFMXRhRTFXYWtKclVqQTFkRk5yV2xCV2JIQnZXVlJDZDJJeFdsVlJiVVpZWWxaYVdWWnRkSE5XVjBwSVlVWlNWVlpYYUVSV2FrWmhaRVV4UlZKc1RrNVdNVWwzVmxSS01HRXhXa2hTV0d4b1VqSm9XRmxYY3pGa2JHeFdWMnhrYTFJeFdraFhhMlF3VlRBeFZtTkZjRmhXUlVweVdYcEdXbVZXU2xsalJrcHBVak5vV1ZaR1dtdFZiVkY0VjJ4V1UyRjZWbk5XYlhSM1pWWlplV042UmxkU2EydzFXVlZhZDFkR1duTlRiRUpYVmtWYVlWcFZaRXRTTVZwelZXMXNVMWRGU2xGV2JHTjNaVVV4UmsxSWFGaFhSM2h4V2xkNFlWZFdWblJrU0dST1VteHdXVlJzWXpWV01rWTJVbTVvVm1KSGFISldNbmhoVmpGYWNWVnRSbE5pU0VJMVYyeGplRk14U1hsU2EyUmhVak5vYjFSVlpETk5iRnB4VTJwQ1ZrMVZXakJXYlhSdlZsWmtTR0ZHWkZwaVdGSXpXV3BHVjJOV1VuSlViR1JUWW10S1dsZHNWbXRTTVZsNVUydGthbE5IYUZkV2JuQkNUVlphV0dNemFHcE5WMUo2V1ZWYWQxUnNTbk5qUkVwWFlUSlJNRmRXV210U01WcDFWR3hhYVZJeFNuWlhWbEpEWkRKSmVGZHJaRmRpVlZwdlZGZHpNV1ZzV1hsT1ZtUmFWbXR3ZWxZeU1EVlpWbGw2Vlcxb1ZXRXhjR2hXTUZWNFVsWktkR0ZGTlZkaVdHUTJWbXRhWVZsWFJYaGFSV2hVWVRKU1ZWbHNaRzlXTVd4WVkzcEdhMkpHU2xaVmJYaFBZVEZKZUZkcmNGWk5ha1V3V1ZaYVlWWldXbkpqUm1oWFRURktlVmRZY0VkWGJWWkhWRzVPWVZJeWVGUlZiWGgzVjFaa1dHVkdUbE5pVmtZMFdXdGFWMVZzV2taWGJGWldZbGhvYUZZeWVITldiSEJHV2taa1UyRXpRbGRXYlRFMFlqRmtSMWRxV2xOV1JVcG9WV3RXZDFWR2JEWlNiVVpyVm1zMWVsbFZaSE5XTVZwMVVXeGFWMkV4Y0doWFZscGFaREExV1ZSdGFFNU5iRXBhVjFkNGIxVXlTWGhXYmxKclUwZFNUMVZ0TlVOV01WbDVUVlJDVjAxRVJsZFpNR2gzVm1zeGRWVnVXbGROYm1oaFdsY3hSMU5IUmtkWGJXeFhVbFp3VWxac1VrZGhNVTE0VTFob1dHSnNTbkJWYlhNeFkwWldjVlJzU214aVJuQjRWVzE0VDFWck1WaGxSbWhXVFZkb2RsWXdaRXRUUmxaellrWndhVmRHU1hwV2ExSkhXVmROZUZadVZsVmlWM2hQVm0xMGQxZHNaRmxqUlRscFRWWkdOVlV5ZEd0aGJFcFlaVWRHVlZaV2NGZFVWbHB6VjBkTmVtRkdaRTVXVkZWNFYxZDBZVll5UmxkVGJrNXFVbTE0V0Zsc1VrTk9SbFowVFZaa1UwMVdTakZXUjNodllWWkplRk51V2xkU2JIQjJWVlJLU21WR1pIVlRiVVpUVW10d1dGWkdXbXRWTVVsNFZXeGtXR0pVYkc5WmExWjNWbXhhZEdWR1RsZE5hMVkwV1RCa2IxWnJNVWRqUjJoYVRXNW9NMVV4WkU5U2F6bFhXa2RzVTFadGRETldiVEYzVXpBMVNGUllhR0ZUUlhCUFZUQmtOR014Vm5SbFNHUlhUVlpLVjFkcll6VlZNVXB6WWtST1YwMXFWbkpXVkVaaFkyczFXV0pHYUdoTldFSXlWbTF3UzFNeFdYaFViazVoVW0xU1dGcFhkRnBOYkZwSVpVZEdWMkpXV2toV1J6VlBZVVpKZWxWdVRscFdSVW96VmpGYVlWZEhUa1pQVjJ4T1ZqRktTVlpzWXpGVE1XeFhVMjVTVm1KR1NtRldNR2hEVjBaWmVXVkdXbXhXTVZwSVYydGtiMVV3TVVkWFZFSllWa1ZLZGxkV1dscGxWazV6WWtkb1UwMXRhRmhXUm1SM1VqRmtSMWR1UmxOaWJWSlZWbTE0UzJWc2JGWmFTRTVZVW10d2VWa3dVbE5XTURGWVZWUkNWMkZyY0U5YVJFRjRVMWRHUjFkc2FGTk5iV2hoVmpGa05GVXlUWGxUV0doV1lrWndWMWxVU2xOVU1WWjBUVlpPYkZadGVGZFpWVlUxVmpBeFJWSnViRmROYWxaNlZtMXplR05XV25GVWJHaFhZa2hDVFZaWE1UUmhNazVYVlc1T1lWSXlhRzlVVm1oRFZteGFkRTFVVWxwV2JFWTFWbGQwYjFadFJYbFZiVGxXWWxoTmVGa3dXbFprTVZweVdrVTVhVkp1UVhkWGExWnJUVVpTYzFOWVpHbFNSa3BYVkZaa2IyVnNXbkphUlZwc1ZteGFlbGxyV210VWJFbDRVbGhrVjJKVVJUQlpla3BUVW1zeFYyRkdRbGRpVmtwM1ZsY3hNR1F4WkhOWGEyUllZa1UxVjFSV1duZFRSbFY1VGxaT2FFMVZjRWhaTUdSSFYyeGFSbGRyZUZaaE1YQmhXa1JHYTJOdFVrZGFSbVJwVTBWSk1GWnNXbXBsUmtsNFYxaG9XRmRIYUZSV01HUlRWMFpTVjFkdVpHaFNiR3cxVkZaYVMySkdTblZSYTNCWFlsaG9kbGxXV2twbFJrNXpWbXhrVjAweWFESldWbEpIWVRGWmVGcElWbFJpUm5CdlZGUkdTMWRHV2tkWGJGcE9WbXMxU0ZZeGFITlVNVnBWWWtab1dtSkdXbUZVVjNoelkyMUdSbFJzYUdsV1Zsa3dWMVJDVTFReFdsZFhiazVxVTBWd1dGbHJXbmRWUmxsNFYyNWtVMkY2YkZoWGExVXhWa1pLVm1FemJGZGlWRVYzV1ZSQk1WTkdVbGxpUms1cFlYcFdWMWRXVWtka01rNVhWbGhrVjJKdFVsbFZiVEUwWlZaa2NsZHJkR2hOUkVaWVZUSndRMWxXV2xoaFJrSmFWak5PTkZZd1pGTlNWbVJ6WTBaa1YySnJTbHBXYlhoVFVqSkZlRlJyWkZkaVJscFVXV3RrYjJJeFVsZFhibVJYVm14d1dWa3dWbXRXYlVwWFVtcE9WVlpzV25wWlZWcEtaV3hHYzFac1dtaGhlbFl5VjFkd1IxbFdaRVpOVld4b1VqSjRUMVp0ZEhkVFZtUlZVVzFHYUUxWGVGaFZNbmh6Vm0xS1IxZHNhRnBpUjJoUFdsVmFVMVl4WkhWVWJYQnBVakZLTlZaRVJtRlpWbEp6VTJ0YVZGWkZXbGxXYlhoaFZrWmFSVkpzY0d0TlJFWllXVlZhWVZkR1NYaFRiR1JZVm14S1RGWlVSbUZTTVdSWldrWm9hR1Z0ZUhoV1JtUXdXVlpPUjFac2FHeFNNMUp2Vm0xMGQwMVdWbGhqUlRsWFRVUkdXVlpIY0ZOV1YwVjVWV3hPWVZKRlJqUlZNV1JIVWpKR1NHSkhhRTVOUlhCMlZtcEtOR0V3TVVkaVJtUldWMGRvY0ZVd1ZURlhSbXgwWTNwR1ZsSnNjREJhVlZaclZERktjMk5FUWxwTlJuQlFWbXBLUzFac1pGVlRiRnBYVFRCS1ZWWnRjRUpsUjA1WFYyNVdWR0pIVWs5WlYzUmhWMVprVlZOdWNFNVdiR3cxVlcxMGEyRnNTWGxoUlRsWFRVWmFTMVJYZUdGa1IwNUdXa1p3VjJKSGR6RldiR1EwWVRKR2MxTnNhRlppUjJoaFdXdGtiMlJzV1hoWGJHUnFUVlphZVZaSGN6RlViRnAwWkhwQ1YyRnJiRFJVVldSTFUwWktjVmRzWkdsU00yaFlWa1pqTVZVeVVuTlhia3BoVWxad2MxWnFRbUZUUmxaWVpVZDBhRkl3V1RKV2JYQkxWakpHY2xOdGFGZFdSVnBoV2xWYWEyUldWbk5VYld4WVVtdHdNMVpzWTNkTlZrVjRVMWhvV0dKSGFFOVdNR2hEVkRGYWRHVkZaRTlTYkd3MFdWVmtNRmRHU1hkalJFWldWak5vZGxadE1VZGphelZYVld4a1RsSnVRalpXYlhCSFpERktkRlZyWkdoU2JWSlBWVzAxUTFNeFduSlZhMlJhVmpCV05GWnNhRzlYUm1SSVZXeENWbUV4V2t4V01WcHpWbFpLY21SR1VsTmlXR041Vmxjd2VGSXhXWGROVm1SWVlXdGFXRmxzYUc5WFJteFhWMjEwVTAxVk5URldNbmh2VmpBd2VGTnVhRmRTTTJoWFZGWmFXbVZIVGtaYVIyaFRUVEpvVlZkc1kzaE9SbHBYVjJ0a1dHSkdjRTlXYWtaaFpXeFplV1JIT1dsU2EyOHlXV3RhYzFkdFNrZGpSMmhoVm14d2VWcEVSbmRTYkhCSFlVZHNWMVpzYTNoV2JYaHJUa1pWZUZkc2FGUmlSM2h2VlcxNFMxbFdjRmhrUjBaWVVtNUNSMVl5ZERCaE1VbDNUbFZvVjFKNlJucFdWRVpyVW14T2NtSkdaR2xXUlZsNlZsaHdRbVZHU25KTlZscGhVbTFTY0ZsVVRrTlZSbHBWVVcxMFZrMVdSalJXYkdocldWWktSMU5zYkZaaVdHaE1WakJhYTJOc1pISlBWbWhUWVROQ05sZFVRbGRqTVd4WFYyeGtWMVpGV2xoWlYzUjNWRVpWZUZkclpGZFdhelY2VmpKNGExUnJNWFJoUlhCWFlsUkNORlJyV25OV01VNXpXa1pPYVZKc2NGbFdiWFJUVVdzNVVsQlVNRDA9'
b=''
if str(datetime.date.today())==x:
    while 1:
        try:
            a=base64.b64decode(a).decode('UTF-8')
        except:break
    with open('Graduate.txt','w',encoding='utf-8') as k:
        k.write(str(a))
else:
    while 1:
        try:
            b=base64.b64decode(b).decode('UTF-8')
        except:break
    with open('Graduate.txt','w',encoding='utf-8') as k:
        k.write(str(b))
print('解密完成~')